# Meal Planning App — Product Requirements Document (PRD)
## 1) Executive Summary
A Flutter + Firebase mobile app that helps Sri Lankan households plan meals from what they already have, repurpose leftovers, and choose seasonal, locally relevant recipes in Sinhala, Tamil, and English. The project’s core aims are meal-planning efficiency and measurable household food-waste reduction, with a strong emphasis on culturally appropriate UI and preservation of traditional reuse tips. &#x20;
**Primary platform (v1): Android**; iOS is enabled by Flutter but not required for the initial scope. **Out of scope**: grocery-delivery integrations and commercialization. &#x20;
**Stack (mandated)**: Flutter (Dart) + Firebase (Auth, Firestore, Cloud Functions, Storage) with real-time sync and offline support. &#x20;
---
## 2) Goals & Non-Goals
### Goals
* Reduce household food waste via **leftover transformation** guidance and **available-ingredient** planning.&#x20;
* Provide **local Sri Lankan recipes**, **seasonal ingredient tracking**, and **multilingual UX** (SI/TA/EN). &#x20;
* Preserve and surface **traditional knowledge** on food preservation and reuse.&#x20;
### Non-Goals
* No grocery delivery / producer partnerships.&#x20;
* No computer-vision “identify food from a photo” feature (explicitly out of scope).&#x20;
* No institutional/catering features beyond households.&#x20;
---
## 3) Personas (concise)
* **Primary Cook**: Budget-conscious parent managing staples, seeks “use-it-today” ideas.
* **Student/Young Professional**: Limited time, wants quick reuse recipes for leftovers.
* **Caregiver for Elders**: Needs gentle spice options and culturally familiar meals.
---
## 4) User Stories (MVP)
* As a user, I can **set language** (SI/TA/EN) at first launch and change it later.
* As a user, I can **inventory** pantry/fridge items and **log leftovers** with portions/expiry.
* As a user, I can **generate a weekly plan** that prefers my available ingredients and **seasonal items**.&#x20;
* As a user, I can **transform a leftover** (e.g., yesterday’s rice) into new dishes with safety guidance.
* As a user, I can **open a recipe** with local substitutes, pairings, scale servings, and add it to plan or shopping list.
* As a user, I can **auto-create a shopping list** from plan + pantry gaps (no external store integration).&#x20;
* As a user, I can **track savings/waste** weekly and see my improvement trends.
---
## 5) Feature Scope & Acceptance Criteria
### 5.1 Onboarding & Profile
* **Language selection** (SI/TA/EN) on first run; persists in profile.
* *AC*: Changing language hot-reloads strings and formats (dates/units) app-wide.
* **Household setup**: size, dietary flags, staple items.
### 5.2 Pantry & Leftovers
* **Pantry inventory** with categories and quantities; **leftover logging** (source dish, portions, cooked date, expiry hint).
* *AC*: “Expiring Soon” view lists items by urgency with 1-tap “Find recipes to use now.”
### 5.3 Recipes & Cultural Knowledge
* **Recipe explorer**: filters by region, spice level, dietary, budget, **seasonality**, and “available-ingredient fit”.
* **Recipe detail**: steps, time, local substitutes, **pairings**, nutrition, leftover notes.
* *AC*: From any recipe, user can **Add to Plan**, **Cook Now**, or **Add to List**.
* *AC*: Seasonal badges show if a recipe uses **in-season** items.&#x20;
### 5.4 Leftover Transformer
* Start from a leftover (e.g., “cooked rice,” “dhal curry”) → curated reuse recipes + food-safety window.
* *AC*: Shows at least 3 suggested transformations with clear prep time; warns if beyond “safe to use” window.
### 5.5 Meal Planner (Weekly/Daily)
* **Drag-and-drop** weekly calendar; **today view** with prep schedule.
* *AC*: Planner prioritizes pantry/leftovers; user can lock meals and auto-fill gaps.
### 5.6 Shopping List
* Auto-generated list from plan + pantry gaps; editable; **store mode** (offline tick-off).
* *AC*: No third-party checkout/integration (out of scope).&#x20;
### 5.7 Insights
* **Waste & savings dashboard** + **weekly review** comparing planned vs cooked.
### 5.8 Accessibility & Localization
* Sinhala/Tamil/English strings via ARB; dynamic text scaling; RTL-safe layouts for Tamil; color-contrast compliant.
---
## 6) Information Architecture (top-level)
* Tabs: **Home** (overview & leftover callouts), **Planner**, **Explore**, **Pantry**, **Insights**.
* Global: quick actions (Add Leftover, Scan/Add Pantry, Create List, Switch Language).
* Deep links: “Expiring item → Explore (pre-filtered)”, “Seasonal pick → Explore (pre-filtered)”.&#x20;
---
## 7) Key Flows (MVP)
### 7.1 First-Run to First Plan
Language → Onboarding → Pantry quick-add → Weekly plan suggestions (favor **seasonal** + **leftovers**) → Shopping list.&#x20;
### 7.2 Leftover Tonight
Home → **Leftover Transformer** → Recipe detail → Cook mode → Prompt to log new leftovers.
### 7.3 Seasonal Cooking
Seasonal guide → Filtered recipes → Add to plan → Shopping list (offline store mode).&#x20;
---
## 8) Technical Specifications
### 8.1 Platform & Frameworks
* **Flutter (Dart)** single codebase, **Android target** for v1. &#x20;
* **Firebase**: Auth, Firestore, Cloud Functions, Storage, Test Lab. **Offline persistence required**. &#x20;
### 8.2 App Architecture
* **Clean Architecture + Feature-first** (data/domain/presentation per feature).
* **State**: Riverpod (or Bloc if preferred) with immutable models (freezed).
* **Navigation**: GoRouter with route guards (auth, onboarding).
* **i18n**: ARB files `app_en.arb`, `app_si.arb`, `app_ta.arb`; intl codegen.
* **Theming**: single design system; dark mode.
### 8.3 Data Model (Firestore, draft)
Collections & keys (all docs include `createdAt`, `updatedAt`, `ownerId` unless noted):
* `users/{uid}`
* `displayName`, `photoUrl`, `locale`, `householdId`, `onboardingComplete`
* `households/{householdId}`
* `members[]`, `dietaryFlags[]`, `staples[]`, `budgetLevel`
* `pantry_items/{id}`
* `householdId`, `name`, `category`, `qty`, `unit`, `expiryDate`, `isLeftover` (false)
* `leftovers/{id}`
* `householdId`, `sourceRecipeId?`, `name`, `portions`, `cookedAt`, `safeUntil`, `notes`, `isLeftover` (true)
* `recipes/{recipeId}`
* `title`, `region`, `spiceLevel`, `steps[]`, `ingredients[{name,qty,unit}]`, `seasonalTags[]`, `pairings[]`, `dietary[]`, `isLocal`
* `plans/{householdId}/weeks/{yyyyww}`
* `days[{date, meals:[{slot, recipeId?, leftoverId?}]}]`
* `shopping_lists/{householdId}/{listId}`
* `items[{name,qty,unit,checked}]`, `sourceWeek`
* `seasonal_items/{id}`
* `name`, `months[]`, `regions[]`, `tips[]`
* `waste_events/{id}`
* `householdId`, `itemRef`, `reason`(`spoiled|forgot|overcooked|other`), `qty`, `unit`, `date`
**Indexes (examples)**
* Compound: `pantry_items(householdId, expiryDate)`, `leftovers(householdId, safeUntil)`, `recipes(isLocal, region, spiceLevel)`.
### 8.4 Sync & Offline
* Enable Firestore persistence; write-through with optimistic UI; background resync on connectivity restore. **Critical lists (pantry, shopping)** fully usable offline.&#x20;
### 8.5 Authentication
* Firebase Auth: Email/Password + Google (optional). Guest mode allowed; upgrade path to linked account.
### 8.6 Cloud Functions (examples)
* `onPlanWrite`: recompute shopping gaps → update `shopping_lists/{id}`.
* `onLeftoverCreate`: compute `safeUntil` based on category heuristic.
* Scheduled: rotate **Seasonal spotlight** cache monthly.
### 8.7 Storage
* Firebase Storage: recipe images, step photos; basic quotas enforced.
### 8.8 Localization & Cultural Fit
* Full string coverage SI/TA/EN, including **regional food names** and measurement units; culturally sensitive imagery and examples. &#x20;
### 8.9 Notifications
* Local reminders: “Use your leftovers today”, “Expiring soon”, “Start prep for dinner”.
* Optional push (FCM) for weekly review.
### 8.10 Analytics (privacy-respecting)
Events (examples): `onboarding_complete`, `pantry_add`, `leftover_create`, `transformer_open`, `recipe_cook`, `plan_generated`, `waste_event_logged`, `lang_changed`.
KPIs: weekly active planners, leftover utilization rate, % meals cooked vs planned, self-reported waste decrease.
### 8.11 Security & Privacy
* **Security Rules** (pattern):
* Read/write limited to `ownerId == request.auth.uid` or household membership.
* Validate enumerations (e.g., `reason in [ ... ]`), numeric ranges, and server timestamps.
* Block writes to derived fields (`safeUntil`) from client—only Functions set these.
* PII minimization; optional data export/delete (GDPR-style).
### 8.12 Performance Targets
* Cold start < 2.5s on low-end Android; typical screen < 200ms first paint.
* Planner operations & list toggles under 100ms.
### 8.13 Accessibility
* WCAG-informed color contrast, scalable type, screen-reader labels; RTL-safe Tamil layouts.
---
## 9) Testing & QA
### 9.1 Automated
* **Unit**: entities, mappers, use-cases.
* **Widget**: Planner, Transformer, Shopping List.
* **Integration**: with Firebase Emulator Suite (Auth, Firestore, Functions, Storage).
* **Golden tests**: critical screens in SI/TA/EN.
### 9.2 Manual
* Device matrix focusing on common Android versions in Sri Lanka; Firebase Test Lab runs.&#x20;
---
## 10) Release Plan
### MVP (v1.0)
* Onboarding + Language, Pantry/Leftovers, Explore & Recipe Detail, Weekly Planner, Shopping List, Insights (basic trends), Offline store mode.
### v1.1
* Seasonal guide module with spotlights; improved leftover safety tips; weekly review nudges.
### v1.2
* Household sharing; cloud backups/multi-device sync; deeper cultural tips library.
*(No grocery delivery, no CV image recognition; remains out of scope.)* &#x20;
---
## 11) Open Questions & Assumptions
* Source for **seasonality calendar** (initial static dataset vs community-curated?).
* How to encode **regional pairings** (taxonomy and editorial workflow).
* Leftover **safety heuristics** (time windows per dish type) — define policy and legal disclaimers.
---
## 12) Dependencies
* Flutter stable, intl, Riverpod/Bloc, GoRouter, freezed/json\_serializable, Firebase SDKs, (optional) Hive for local caches.
---
## 13) Appendix — Rationale from Source Document
* The app’s aim and emphasis on **leftover reuse**, **local recipes**, **seasonal tracking**, and **multilingual support** come directly from the research aim/objectives and scope. &#x20;
* Platform & stack choices (Flutter + Firebase with **offline**) are explicitly listed as software requirements.&#x20;
* Android focus and **out-of-scope items** (grocery delivery, image recognition) are defined in the scope table. &#x20;
---
If you want, I can convert this PRD into a **starter repository checklist** (issues + milestones) or generate **Firestore security-rule scaffolds** and **CI YAML** next.

